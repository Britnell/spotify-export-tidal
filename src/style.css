@import 'tailwindcss';

@theme {
  --color-blu-500: oklch(0.423 0.1567 268.41);
  --color-blu-600: oklch(0.423 0.1567 268.41);
  --color-blu-700: oklch(0.3612 0.1567 268.41);
  --color-blu-800: oklch(0.298 0.1567 268.41);
  --color-blu-900: oklch(0.2467 0.1567 268.41);

  --color-spotify: #1ed760;
}

html {
  scroll-behavior: smooth;
}
body {
  font-family: system-ui, sans-serif;
}

@layer base {
  body {
    background: oklch(0.1397 0.074 268.41);
    color: #fff;
  }
  button {
    cursor: pointer;
  }
  input {
    @apply rounded;
  }

  .h1,
  .h2,
  .h3,
  .h4,
  header span {
    /* font-family: ui-rounded, 'Hiragino Maru Gothic ProN', Quicksand, Comfortaa, Manjari, 'Arial Rounded MT', 'Arial Rounded MT Bold', Calibri, source-sans-pro, sans-serif; */
    font-family: Bahnschrift, 'DIN Alternate', 'Franklin Gothic Medium', 'Nimbus Sans Narrow', sans-serif-condensed,
      sans-serif;
  }
  .h1 {
    @apply text-4xl;
  }
  .h2 {
    @apply text-2xl;
  }
  .h3 {
    @apply text-xl;
  }
  .h4 {
    @apply text-lg;
  }
  p,
  li {
    @apply text-gray-200;
  }

  p a,
  ul a,
  li a {
    text-decoration: underline;
  }

  .button {
    @apply bg-blue-100 px-2 rounded-md;
  }
}

@layer components {
  .step {
    /* background: var(--color-blu-800); */
    @apply rounded-md px-2 py-1 border border-white
     /* bg-slate-800; */;
  }
  .button {
    background: var(--color-blu-700);
  }
  .button.sm {
    @apply text-sm px-1;
    background: var(--color-blu-800);
  }
}

/* CSS Kevin content grid  */

.content-grid {
  --padding-inline: 1rem;
  --content-max-width: 60ch;
  --breakout-max-width: 1200px;

  --breakout-size: calc((var(--breakout-max-width) - var(--content-max-width)) / 2);

  display: grid;
  grid-template-columns:
    [full-width-start] minmax(var(--padding-inline), 1fr)
    [breakout-start] minmax(0, var(--breakout-size))
    [content-start] min(100% - (var(--padding-inline) * 2), var(--content-max-width))
    [content-end]
    minmax(0, var(--breakout-size)) [breakout-end]
    minmax(var(--padding-inline), 1fr) [full-width-end];
}

.content-grid > :not(.breakout, .fullwidth),
.fullwidth > :not(.breakout, .fullwidth) {
  grid-column: content;
}

.content-grid > .breakout {
  grid-column: breakout;
}

.content-grid > .fullwidth {
  grid-column: full-width;

  display: grid;
  grid-template-columns: inherit;
}
